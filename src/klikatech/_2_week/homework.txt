ДЗ:

1. Реализовать классы:
а) case class I(i: Int)		// Int
б) case class D(d: Double)	// Double
- с методами (операциями)  + - * /  (по желанию, прочие арифметические операции), рассматриваемый пример для ознакомления: klikatech._2_week._6_left_assoc.MyInt

Комментарий к задаче:
- Обращайте внимание на приоритеты операций и ассоциативность операций (очередность операций при равном приоритете)
 - Использовать двоеточие ':' в имени метода операции, например:
+: или :+ или :+: - различные варианты.
Проверить очередность вычисления выражения в таком случае.
Ответить на вопрос, в чем разница между операциями  +:  и  *:

2. Написать калькулятор, используя за основу свои классы I (Int) и D (Double) из предыдущего задания.

Условие:
Операции должны состоять из 2х и более операндов (чисел), например:
a + b * c + x / z

3. Задание:
В Scala имеется scala.util.Random, для генерации псевдослучайных чисел,
алгоритм https://en.wikipedia.org/wiki/Linear_congruential_generator

Пример использования:
val r = scala.util.Random
val n1 = r.nextInt
n1: Int = -39139337
val n2 = r.nextInt
n2: Int = -1286993272
- видно, что при каждом вызове r.nextInt (где r - иммутабельная переменная),
генерируются различные числа, что является понятием side effect

Задача, написать генератор псевдослучайных чисел (свою реализацию функции nextInt), и убрать сайд-эфект в генерации псевдо-чисел,
т.е. чтобы при повторном вызове r.nextInt - число оставалось идентичным (без сайд-эффектов),
а) если r - иммутабельный, то r.nextInt - не меняет свое поведение;
б) если создается новый инстанс r2 - только в этом случае r2.nextInt будет выдавать отличное от r.nextInt, значение.
